# ~/.tmux.conf - tmux terminal multiplexer config
# Ches Martin    (http://chesmart.in/)

###########################################################################
#                             Global Settings                             #
###########################################################################

# Use the OS X pasteboard hack if available
if 'command -v reattach-to-user-namespace >/dev/null' \
    'set -gq @osx-pasteboard true'

if 'tmux show -gv @osx-pasteboard' \
    'set -g default-command "reattach-to-user-namespace -l $SHELL"'

# tmux is supposed to figure out 256-color support from terminfo and set this,
# but it seems to fail anyway. Kind of sucks for when I run Terminal.app...
# TODO: we can use shell here to be smart-ish
set -g default-terminal "screen-256color"

# set prefix key to match screen's
set -g prefix C-a
unbind-key C-b

# send the prefix to client inside window (ala nested sessions)
bind-key a send-prefix

# disable wait after escape, so vim is usable
set-option -sg escape-time 0

# in copy mode, use vi bindings and make the mouse work
setw -g mode-keys vi
setw -g mouse on
setw -g mouse-utf8 on

# Ctrl-p/n for tmux command history -- the vi mode is more like shell vi mode
# than vi command mode
set-option -g status-keys emacs

# scrollback buffer n lines
set -g history-limit 12000

# bells and monitoring
set -g visual-activity on
# This was removed -- what happened to it?
# set -g visual-content on
set -g visual-silence on
set -g visual-bell on
set -g bell-action any

# purdy status bar
set -g status-bg colour236
set -g status-fg white
set -g status-left "#[fg=green][#[fg=cyan]#S#[fg=green]]#[fg=colour250] %a %m/%d %H:%M#[default]"
set -g status-left-length 35
set -g status-justify centre
setw -g window-status-current-bg colour98
setw -g window-status-current-format '#[fg=black,bg=yellow] #I #[fg=white,bg=colour98] #W #F '
setw -g window-status-current-attr bold
set -g status-right "#H #[fg=cyan][#(uptime|cut -d ' ' -f 12-)]#[default]"

# set -g message-attr bold
# set -g message-fg black
# set -g message-bg yellow

# try to set wm window titles with xterm codes
set -g set-titles on

# wm window title string (uses statusbar variables)
# set -g set-titles-string "#I:#W"

# Zero-based indexing for windows and panes isn't terribly sensible.
set-option -g base-index 1
set-window-option -g pane-base-index 1

# the panes display and status messages don't show very long by default
set -g display-panes-time 2000
set -g display-time 2000

# If we want Vim to be told about focus: http://git.io/2UqSgQ
set -g focus-events on

###########################################################################
#                    Key Bindings - Screen and Vim-ish                    #
###########################################################################

# I'm leaving some unbinds for defaults commented out, as I attempt to
# train myself on some tmux defaults that I like better than screen's

# reload settings
# TODO: bind key to load sessions?
bind-key R source-file ~/.tmux.conf \; display-message "tmux config reloaded"

# toggle previous window like screen, although prefix-l will
# be easy to get used to
bind-key C-a last-window

# vim-ish movement between and resizing of panes
bind-key -r C-h select-pane -L
bind-key -r C-j select-pane -D
bind-key -r C-k select-pane -U
bind-key -r C-l select-pane -R
bind-key -r < resize-pane -L 3
bind-key -r > resize-pane -R 3
bind-key -r J swap-pane -D
bind-key -r K swap-pane -U

# TODO: Of COURSE the keycodes aren't working properly...
bind-key -r S-Left swap-window -t -1
bind-key -r S-Right swap-window -t +1

# remap kill window, add confirm map before killing server
unbind &
bind-key Q confirm kill-window
bind-key X confirm kill-server

bind-key m setw monitor-activity
bind-key M command-prompt -p "monitor silence: interval (s)" "setw monitor-silence %%"

# name window
unbind ,
bind-key A command-prompt -I "#W" "rename-window %%"

# Session switching. "H" for "home", comma will accept a prefix string
bind-key H switchc -t main
bind-key , command-prompt -p "switch to session:" "switch-client -t '%%'"
bind-key C command-prompt -p "create session named:" "new-session -s %%"

# Make copy mode more vim-like.
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-selection
bind -t vi-copy C-v rectangle-toggle

# Copy top of tmux paste buffer stack to OS clipboard.
# Alternatively, this will always immediately copy to system pasteboard:
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
if 'tmux show -gv @osx-pasteboard' \
    'bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'

# I'll give these mnemonic split bindings a try
# unbind %
# unbind '"'
bind | split-window -h
bind - split-window -v

# I like to quickly pop open a short shell from fullscreen apps like vim, IRC
bind-key _ if-shell -F '#{window_zoomed_flag}' \
    'resize-pane -Z ; select-pane -t:.+1' \
    'split-window -l 10'

# "hide", return to last pane and zoom it. Compliments the above _
bind h select-pane -l \; resize-pane -Z

# whizbang custom keybindings
bind-key F1 command-prompt -p "Man:" "split-window -h 'exec man %%'"
bind-key @ command-prompt -p "SSH:" "new-window -n %1 'ssh %1'"
bind-key / copy-mode \; send-keys ?

# Toggle piping output from a pane to file
bind-key C-p pipe-pane -o 'cat >> ~/.tmux/logs/#S-#W-#T.out'

# present a menu of URLs to open from the visible pane. sweet.
bind-key U capture-pane \;\
    save-buffer /tmp/tmux-buffer \;\
    split-window -l 10 "urlview /tmp/tmux-buffer"

# This ugliness makes mouse scrolling a pane "Just Work" the way it did before
# tmux 2.1. This will probably be a default mapping in the next version:
# https://github.com/tmux/tmux/issues/145
bind -n WheelUpPane select-pane -t = \;\
    if -t = -F "#{mouse_any_flag}" "send-keys -M" \
        "if -t = -F '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

#######################################################################
#                       Session Initialization                        #
#######################################################################

# need a default session despite the conditionals below
new-session -d -s default

# Default session setups for certain hosts
if '[ `hostname -s` = lupin ] && ! tmux has-session -t main' \
    'source-file $HOME/.tmux/lupin.conf'
if '[ `hostname -s` = kodama ] && ! tmux has-session -t main' \
    'source-file $HOME/.tmux/kodama.conf'
if '[ `hostname -s` = Fio ] && ! tmux has-session -t main' \
    'source-file $HOME/.tmux/fio.conf'

# If we started one of the preconfigured sessions, use it and kill the default
if 'tmux has-session -t main && tmux has-session -t default' \
    'switch-client -t main; kill-session -t default'

